package Greedy;

/**
 * <a href="https://leetcode.cn/problems/wiggle-subsequence/description/">376. 摆动序列</a>
 * <p>
 * 如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。
 * <p>
 * 例如， [1, 7, 4, 9, 2, 5] 是一个 摆动序列 ，因为差值 (6, -3, 5, -7, 3) 是正负交替出现的。
 * <p>
 * 相反，[1, 4, 7, 2, 5] 和 [1, 7, 4, 5, 5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。
 * 子序列 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。
 * <p>
 * 给你一个整数数组 nums ，返回 nums 中作为 摆动序列 的 最长子序列的长度 。
 * 
 * 解题思路：
 * 使用贪心算法解决此问题。核心思想是统计波峰和波谷的个数，忽略中间的平坡元素。
 * 我们通过比较相邻元素差值的变化情况来判断是否形成摆动。
 * 当差值符号发生变化时(从正变负或从负变正)，我们就找到了一个摆动点。
 * 特别处理的情况：
 * 1. 数组只有一个元素，返回1
 * 2. 差值为0的情况，表示平坡，需要跳过
 * 3. 连续上升或下降的情况，只记录转折点
 */
public class Day20251015 {
    public int wiggleMaxLength(int[] nums) {
        // 边界条件：数组长度小于2时直接返回长度
        if (nums.length < 2) {
            return nums.length;
        }
        
        // preDiff: 前一个差值，curDiff: 当前差值，result: 最长摆动子序列长度
        // 初始result为1，因为至少一个元素可以构成摆动序列
        int preDiff = 0, curDiff = 0, result = 1;
        
        // 遍历数组，计算相邻元素之间的差值
        for (int i = 0; i < nums.length - 1; i++) {
            // 计算当前相邻元素的差值
            curDiff = nums[i + 1] - nums[i];
            
            // 判断是否形成摆动：
            // 情况1：之前差值>=0(上升或平坡)，当前差值<0(下降) => 找到波峰
            // 情况2：之前差值<=0(下降或平坡)，当前差值>0(上升) => 找到波谷
            if ((preDiff >= 0 && curDiff < 0) || (preDiff <= 0 && curDiff > 0)) {
                // 发现摆动，结果加1
                result++;
                // 更新前一个差值为当前差值，用于下一次比较
                preDiff = curDiff;
            }
            // 如果没有形成摆动(平坡或同向变化)，不更新preDiff，继续下一次循环
        }
        
        return result;
    }
}